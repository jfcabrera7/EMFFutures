print(a)
a<-42
A<-a*2
print(a)
print(A)
help(urca)
??urca
install.packages("urca")
library(urca)
has_rtools()
rtools_path()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("urca")
library(urca)
## Installing packages =========================================================
# install.packages("urca")
# install.packages("egcm")
# install.packages("EnvStats")
# install.packages("tidyverse")
install.packages("pacman")
require(pacman)
pacman::p_load(
pacman,
dplyr,
tidyr,
stringr,
lubridate,
httr,
ggvis,
ggplot2,
shiny,
rio,
rmarkdown
)
?urca
?egcm
?EnvStats
?pacman
??pacman
rrequire(datasets)
require(datasets)
library(datasets)
## Setting working directory ===================================================
getwd()
setwd("C:/Users/juanf/OneDrive/GitRepos/emf_futures/data")
## Importing .csv data =========================================================
# dat <- as_tibble(read.csv("MainData01_CSV.csv"))
dat <- read.csv("MainData01_CSV.csv")
names(dat)
head(dat, n = 10)
## Data cleaning and sorting ===================================================
dat$Dates
dat$Dates <- as.Date(dat$Dates, "%m/%d/%Y")            # Convert char into dates
#dat$Dates <- NULL                                     # Remove a column
dat <- dat[order(dat$Dates, decreasing = FALSE),]      # Sort by column(s)
head(dat, n = 10)
#dat$Dates <- NULL                                     # Remove a column
dat <- dat[order(dat$Dates, decreasing = TRUE),]      # Sort by column(s)
head(dat, n = 5)
#dat$Dates <- NULL                                     # Remove a column
dat <- dat[order(dat$Dates, decreasing = FALSE),]      # Sort by column(s)
## Calculating the Hedge Ratio =================================================
# Calculating lagged values
dat$FMEMAdjPriceLag1 <- lag(dat$FMEMAdjPrice)
View(dat)
dat$FMEMAdjPriceLag1 <- lag(dat$FMEMAdjPrice)
dat$EMFAdjPriceLag1 <- lag(dat$EMFAdjPrice)
dat$VWOAdjPriceLag1 <- lag(dat$VWOAdjPrice)
dat$FTSEPriceLag1 <- lag(dat$FTSEPrice)
# Calculating returns - daily
dat$FMEMAdjDreturn <- (dat$FMEMAdjPrice / dat$FMEMAdjPriceLag1) - 1
dat$EMFAdjDreturn <- (dat$EMFAdjPrice / dat$EMFAdjPriceLag1) - 1
dat$VWOAdjDreturn <- (dat$VWOAdjPrice / dat$VWOAdjPriceLag1) - 1
dat$FTSEDreturn <- (dat$FTSEPrice / dat$FTSEPriceLag1) - 1
keepvars <- c("dat$FMEMAdjDreturn",
"dat$EMFAdjDreturn",
"dat$VWOAdjDreturn",
"dat$FTSEDreturn"
)
dat2 <- dat[keepvars]
keepvars <- c("FMEMAdjDreturn",
"EMFAdjDreturn",
"VWOAdjDreturn",
"FTSEDreturn"
)
dat2 <- dat[keepvars]
# Summary statistics of returns
summary(dat2$FMEMAdjDreturn)
head(dat2)
keepvars <- c("Dates",
"FMEMAdjDreturn",
"EMFAdjDreturn",
"VWOAdjDreturn",
"FTSEDreturn"
)
dat2 <- dat[keepvars]
head(dat2)
# Estimating the Hedge Ratio (OLS)
lmodel <- lm(VWOAdjDreturn ~ EMFAdjDreturn, data = dat2)
View(lmodel)
summary(lmodel)
dat2 %>%
ggplot(aes(x = EMFAdjDreturn, y = VWOAdjDreturn)) +
geom_point(colour = "red") +
geom_smooth(method = "lm", fill = NA)
dat2 %>%
ggplot(aes(x = EMFAdjDreturn, y = VWOAdjDreturn)) +
geom_point(colour = "red3") +
geom_smooth(method = "lm", fill = NA)
dat2 %>%
ggplot(aes(x = EMFAdjDreturn, y = VWOAdjDreturn)) +
geom_point(colour = "red") +
geom_smooth(method = "lm", fill = NA)
